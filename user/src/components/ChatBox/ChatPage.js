import React, { useState, useRef, useEffect } from 'react';
import { Layout, Typography, Row, Col, Button, Input, Avatar, Badge, Card, Divider, message as antMessage } from 'antd';
import {
    SendOutlined,
    RobotOutlined,
    UserOutlined,
    QuestionCircleOutlined,
    ClockCircleOutlined,
    BookOutlined,
    HeartOutlined,
    LoadingOutlined,
    ReloadOutlined
} from '@ant-design/icons';
import { useSelector } from 'react-redux';
import './ChatPage.scss';

// ‚úÖ Import chatbot service
import { 
    createChatBotSession, 
    sendMessage as sendChatMessage,
    extractTextFromResponse,
    generateSessionId 
} from '../../services/chatbotService';

const { Title, Paragraph } = Typography;
const { Content } = Layout;

const ChatPage = () => {
    const [messages, setMessages] = useState([
        {
            type: 'bot',
            content: 'Xin ch√†o! T√¥i l√† DABS Assistant - Tr·ª£ l√Ω ƒë·∫∑t kh√°m th√¥ng minh ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t l·ªãch kh√°m b·ªánh, t√¨m b√°c sƒ© ph√π h·ª£p v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ y t·∫ø. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
            time: new Date()
        }
    ]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [sessionId, setSessionId] = useState(null);
    const [isInitializing, setIsInitializing] = useState(false);
    
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);

    // ‚úÖ Get user and token from Redux store
    const user = useSelector((state) => state.user?.user || state.auth?.user);
    const accessToken = useSelector((state) => state.user?.accessToken || state.auth?.accessToken);
    const userId = user?.id || `guest_${Date.now()}`;

    // ‚úÖ Initialize chat session when component mounts
    useEffect(() => {
        if (userId && userId !== `guest_${Date.now()}` && accessToken) {
            initializeChatSession();
        }
    }, [userId, accessToken]);

    // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages]);

    // Focus v√†o input khi trang ƒë∆∞·ª£c load
    useEffect(() => {
        if (inputRef.current) {
            inputRef.current.focus();
        }
    }, []);

    // ‚úÖ Initialize chat session using chatbotService
    const initializeChatSession = async () => {
        if (isInitializing) return;

        setIsInitializing(true);

        try {
            console.log('üîÑ Initializing chat session for user:', userId);

            // Generate unique session ID
            const newSessionId = generateSessionId();
            
            // Create session using chatbotService
            const sessionResult = await createChatBotSession(newSessionId, userId, accessToken);
            
            console.log('‚úÖ Session created:', sessionResult);
            setSessionId(newSessionId);
            
            antMessage.success('ƒê√£ k·∫øt n·ªëi v·ªõi tr·ª£ l√Ω AI!');

        } catch (error) {
            console.error('‚ùå Error initializing chat session:', error);
            antMessage.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi tr·ª£ l√Ω AI. Vui l√≤ng th·ª≠ l·∫°i.');
            setSessionId(null);
        } finally {
            setIsInitializing(false);
        }
    };

    // ‚úÖ Function to start new chat session
    const startNewSession = async () => {
        try {
            setIsLoading(true);
            console.log('üîÑ Starting new session...');

            if (!accessToken) {
                antMessage.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng tr·ª£ l√Ω AI');
                return;
            }

            // Generate new session ID
            const newSessionId = generateSessionId();
            
            // Create new session
            const sessionResult = await createChatBotSession(newSessionId, userId, accessToken);
            
            setSessionId(newSessionId);

            // Reset messages with welcome message
            setMessages([{
                type: 'bot',
                content: `Xin ch√†o ${user?.fullName || user?.name || 'b·∫°n'}! T√¥i l√† DABS Assistant - Tr·ª£ l√Ω ƒë·∫∑t kh√°m th√¥ng minh ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI.

üè• T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚Ä¢ ƒê·∫∑t l·ªãch kh√°m b·ªánh theo chuy√™n khoa
‚Ä¢ T√¨m b√°c sƒ© ph√π h·ª£p v·ªõi tri·ªáu ch·ª©ng
‚Ä¢ T∆∞ v·∫•n quy tr√¨nh kh√°m ch·ªØa b·ªánh
‚Ä¢ H∆∞·ªõng d·∫´n chu·∫©n b·ªã tr∆∞·ªõc khi kh√°m
‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ y t·∫ø

H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay!`,
                time: new Date()
            }]);

            antMessage.success('ƒê√£ t·∫°o phi√™n chat m·ªõi v·ªõi tr·ª£ l√Ω AI!');
            console.log('‚úÖ New session started:', newSessionId);

        } catch (error) {
            console.error('‚ùå Error creating new session:', error);
            antMessage.error('Kh√¥ng th·ªÉ t·∫°o phi√™n chat m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleInputChange = (e) => {
        setInput(e.target.value);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && input.trim() && !isLoading) {
            sendMessage();
        }
    };

    // ‚úÖ Enhanced sendMessage using chatbotService
    const sendMessage = async () => {
        if (!input.trim() || isLoading || !sessionId || !accessToken) {
            if (!accessToken) {
                antMessage.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng tr·ª£ l√Ω AI');
            }
            return;
        }

        const userMessage = input.trim();
        setInput('');
        setIsLoading(true);

        // Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        const userMessageObj = {
            type: 'user',
            content: userMessage,
            time: new Date()
        };

        setMessages(prev => [...prev, userMessageObj]);

        try {
            console.log('üîÑ Sending message to ADK agent...');

            // ‚úÖ Send message to API
            const response = await sendChatMessage(sessionId, userId, userMessage);

            console.log('‚úÖ Raw response from API:', response);

            // ‚úÖ Extract text from response using helper function
            const botResponseText = extractTextFromResponse(response);
            
            console.log('‚úÖ Bot response text:', botResponseText);

            // ‚úÖ Add bot response to messages
            const botMessageObj = {
                type: 'bot',
                content: botResponseText || 'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n nh∆∞ng kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p.',
                time: new Date()
            };

            setMessages(prev => [...prev, botMessageObj]);

        } catch (error) {
            console.error('‚ùå Error sending message:', error);
            
            const errorMessageObj = {
                type: 'bot',
                content: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi tr·ª£ l√Ω AI. Vui l√≤ng th·ª≠ l·∫°i sau.',
                time: new Date()
            };

            setMessages(prev => [...prev, errorMessageObj]);
            antMessage.error('L·ªói k·∫øt n·ªëi API. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsLoading(false);
        }
    };

    // ‚úÖ Handle suggested question click
    const handleSuggestedQuestion = async (questionText) => {
        if (!sessionId || !accessToken) {
            antMessage.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng tr·ª£ l√Ω AI');
            return;
        }

        setInput('');
        setIsLoading(true);

        // Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        const userMessageObj = {
            type: 'user',
            content: questionText,
            time: new Date()
        };

        setMessages(prev => [...prev, userMessageObj]);

        try {
            // Send to API
            const response = await sendChatMessage(sessionId, userId, questionText);
            const botResponseText = extractTextFromResponse(response);
            
            // Add bot response
            const botMessageObj = {
                type: 'bot',
                content: botResponseText || 'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi c·ªßa b·∫°n nh∆∞ng kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p.',
                time: new Date()
            };

            setMessages(prev => [...prev, botMessageObj]);

        } catch (error) {
            console.error('‚ùå Error sending suggested question:', error);
            
            const errorMessageObj = {
                type: 'bot',
                content: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.',
                time: new Date()
            };

            setMessages(prev => [...prev, errorMessageObj]);
            antMessage.error('L·ªói k·∫øt n·ªëi API. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsLoading(false);
        }
    };

    // Format timestamp
    const formatTime = (date) => {
        return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    };

    // ‚úÖ Get session status
    const getSessionStatus = () => {
        if (isInitializing) return { status: 'processing', text: 'ƒêang k·∫øt n·ªëi...' };
        if (!accessToken) return { status: 'warning', text: 'Ch∆∞a ƒëƒÉng nh·∫≠p' };
        if (!sessionId) return { status: 'error', text: 'Ch∆∞a k·∫øt n·ªëi' };
        return { status: 'success', text: 'Tr·ª±c tuy·∫øn v·ªõi AI' };
    };

    const sessionStatus = getSessionStatus();

    // Danh s√°ch c√¢u h·ªèi g·ª£i √Ω
    const suggestedQuestions = [
        { icon: <QuestionCircleOutlined />, text: 'C√°ch ƒë·∫∑t l·ªãch kh√°m?' },
        { icon: <ClockCircleOutlined />, text: 'Gi·ªù l√†m vi·ªác?' },
        { icon: <BookOutlined />, text: 'C√≥ nh·ªØng chuy√™n khoa n√†o?' },
        { icon: <HeartOutlined />, text: 'L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o h·ªì s∆° b·ªánh nh√¢n?' },
    ];

    return (
        <Content className="chat-page-container">
            <Row gutter={[24, 24]}>
                <Col xs={24} md={16} lg={16} className="chat-main-col">
                    <Card className="chat-card">
                        <div className="chat-header">
                            <Avatar icon={<RobotOutlined />} className="bot-avatar" size={42} />
                            <div className="header-info">
                                <Title level={4} className="bot-name">DABS Assistant</Title>
                                <div className="bot-status">
                                    <Badge status={sessionStatus.status} />
                                    <span>{sessionStatus.text}</span>
                                </div>
                            </div>
                            {/* ‚úÖ Add new session button */}
                            <div className="header-actions">
                                <Button
                                    type="text"
                                    icon={<ReloadOutlined />}
                                    onClick={startNewSession}
                                    disabled={isLoading || isInitializing}
                                    loading={isLoading}
                                    title="T·∫°o phi√™n chat m·ªõi"
                                />
                            </div>
                        </div>

                        <Divider className="chat-divider" />

                        <div className="chat-messages">
                            {messages.map((message, index) => (
                                <div
                                    key={index}
                                    className={`message ${message.type === 'user' ? 'user-message' : 'bot-message'}`}
                                >
                                    {message.type === 'bot' && (
                                        <Avatar
                                            icon={<RobotOutlined />}
                                            className="message-avatar"
                                            size="default"
                                        />
                                    )}

                                    <div className="message-content">
                                        <div className="message-bubble">
                                            {message.content}
                                        </div>
                                        <div className="message-time">
                                            {formatTime(message.time)}
                                        </div>
                                    </div>

                                    {message.type === 'user' && (
                                        <Avatar
                                            icon={<UserOutlined />}
                                            className="message-avatar"
                                            size="default"
                                        />
                                    )}
                                </div>
                            ))}

                            {/* ‚úÖ Loading indicator */}
                            {(isLoading || isInitializing) && (
                                <div className="message bot-message">
                                    <Avatar
                                        icon={<RobotOutlined />}
                                        className="message-avatar"
                                        size="default"
                                    />
                                    <div className="message-content">
                                        <div className="message-bubble loading">
                                            <LoadingOutlined /> {isInitializing ? 'ƒêang k·∫øt n·ªëi tr·ª£ l√Ω AI...' : 'ƒêang x·ª≠ l√Ω...'}
                                        </div>
                                    </div>
                                </div>
                            )}

                            <div ref={messagesEndRef} />
                        </div>

                        <div className="chat-input">
                            <Input
                                placeholder={
                                    isLoading ? "ƒêang x·ª≠ l√Ω..." : 
                                    isInitializing ? "ƒêang k·∫øt n·ªëi..." : 
                                    !accessToken ? "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng AI..." :
                                    !sessionId ? "Ch∆∞a k·∫øt n·ªëi v·ªõi AI..." :
                                    "Nh·∫≠p c√¢u h·ªèi v·ªÅ y t·∫ø, ƒë·∫∑t kh√°m..."
                                }
                                value={input}
                                onChange={handleInputChange}
                                onKeyPress={handleKeyPress}
                                size="large"
                                ref={inputRef}
                                disabled={isLoading || isInitializing || !sessionId || !accessToken}
                                suffix={
                                    <Button
                                        type="primary"
                                        icon={isLoading ? <LoadingOutlined /> : <SendOutlined />}
                                        onClick={sendMessage}
                                        disabled={!input.trim() || isLoading || isInitializing || !sessionId || !accessToken}
                                        className="send-button"
                                        loading={isLoading}
                                    >
                                        G·ª≠i
                                    </Button>
                                }
                            />
                        </div>
                    </Card>
                </Col>

                <Col xs={24} md={8} lg={8}>
                    <Card className="info-card">
                        <Title level={4}>H·ªèi ƒë√°p y t·∫ø v·ªõi AI</Title>
                        <Paragraph>
                            Tr·ª£ l√Ω ·∫£o DABS Assistant ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ d·ªãch v·ª• y t·∫ø,
                            ƒë·∫∑t kh√°m v√† th√¥ng tin v·ªÅ b√°c sƒ© t·∫°i h·ªá th·ªëng DABS.
                        </Paragraph>

                        {/* ‚úÖ Session info */}
                        {sessionId && (
                            <div className="session-info">
                                <small style={{ color: '#666' }}>
                                    Session ID: {sessionId.slice(-8)}...
                                </small>
                            </div>
                        )}

                        <Divider />

                        <div className="suggested-questions">
                            <Title level={5}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</Title>
                            {suggestedQuestions.map((question, index) => (
                                <Button
                                    key={index}
                                    className="question-button"
                                    icon={question.icon}
                                    onClick={() => handleSuggestedQuestion(question.text)}
                                    disabled={isLoading || isInitializing || !sessionId || !accessToken}
                                    loading={isLoading}
                                >
                                    {question.text}
                                </Button>
                            ))}
                        </div>

                        <Divider />

                        <div className="contact-info">
                            <Title level={5}>C·∫ßn h·ªó tr·ª£ th√™m?</Title>
                            <Paragraph>
                                Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua hotline: <strong>1900 1234</strong>
                                <br />
                                ho·∫∑c email: <strong>contact@dabs.com.vn</strong>
                            </Paragraph>
                        </div>
                    </Card>
                </Col>
            </Row>
        </Content>
    );
};

export default ChatPage;