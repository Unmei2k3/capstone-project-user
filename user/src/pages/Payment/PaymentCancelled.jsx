import React, { useState, useEffect } from 'react';
import {
    Result,
    Card,
    Descriptions,
    Button,
    Space,
    Tag,
    Typography,
    Divider,
    Row,
    Col,
    Alert,
    Spin,
    Modal,
    List
} from 'antd';
import {
    CloseCircleOutlined,
    HomeOutlined,
    RedoOutlined,
    PhoneOutlined,
    MailOutlined,
    ExclamationCircleOutlined,
    ClockCircleOutlined,
    InfoCircleOutlined,
    DollarOutlined,
    CalendarOutlined,
    UserOutlined
} from '@ant-design/icons';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { getPaymentByOrderId, cancelPayment } from '../../services/paymentService';

import './PaymentCancelled.scss';
import dayjs from 'dayjs';
import 'dayjs/locale/vi';

// ‚úÖ Set Vietnamese locale
dayjs.locale('vi');

const { Title, Text, Paragraph } = Typography;
const { confirm } = Modal;

const PaymentCancelled = () => {
    const [loading, setLoading] = useState(true);
    const [paymentData, setPaymentData] = useState(null);
    const [error, setError] = useState(null);
    const [cancelling, setCancelling] = useState(false);
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();

    const orderId = searchParams.get('orderId') || searchParams.get('orderCode');
    const cancelReason = searchParams.get('cancel') || searchParams.get('reason');
    const status = searchParams.get('status');

    // ‚úÖ Vietnamese date formatting
    const formatDateTime = (dateString) => {
        if (!dateString) return dayjs().format('HH:mm:ss DD/MM/YYYY');

        try {
            const date = dayjs(dateString);
            return date.format('HH:mm:ss DD/MM/YYYY');
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªãnh d·∫°ng ng√†y:', error);
            return dayjs().format('HH:mm:ss DD/MM/YYYY');
        }
    };

    const formatTime = (dateString) => {
        if (!dateString) return dayjs().format('HH:mm:ss');

        try {
            const date = dayjs(dateString);
            return date.format('HH:mm:ss');
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªãnh d·∫°ng gi·ªù:', error);
            return dayjs().format('HH:mm:ss');
        }
    };

    // ‚úÖ Vietnamese amount formatting
    const formatAmount = (amount) => {
        if (!amount && amount !== 0) return '0';
        return new Intl.NumberFormat('vi-VN').format(amount);
    };

    // ‚úÖ Vietnamese cancellation reason mapping
    const getCancellationReason = (reason) => {
        const reasonMap = {
            'user': 'Ng∆∞·ªùi d√πng h·ªßy',
            'timeout': 'H·∫øt th·ªùi gian ch·ªù',
            'failed': 'Thanh to√°n th·∫•t b·∫°i',
            'system': 'L·ªói h·ªá th·ªëng',
            'insufficient_funds': 'Kh√¥ng ƒë·ªß s·ªë d∆∞',
            'card_declined': 'Th·∫ª b·ªã t·ª´ ch·ªëi',
            'network_error': 'L·ªói m·∫°ng'
        };
        return reasonMap[reason] || 'ƒê√£ h·ªßy';
    };

    // ‚úÖ Refund status mapping
    const getRefundStatusInfo = (status) => {
        const statusMap = {
            'completed': { color: 'success', text: 'ƒê√É HO√ÄN TI·ªÄN' },
            'processing': { color: 'processing', text: 'ƒêANG X·ª¨ L√ù' },
            'pending': { color: 'warning', text: 'CH·ªú X·ª¨ L√ù' },
            'failed': { color: 'error', text: 'HO√ÄN TI·ªÄN TH·∫§T B·∫†I' },
            'no_charge': { color: 'default', text: 'CH∆ØA THANH TO√ÅN' }
        };
        return statusMap[status?.toLowerCase()] || { color: 'default', text: 'KH√îNG X√ÅC ƒê·ªäNH' };
    };

    useEffect(() => {
        if (orderId) {
            fetchPaymentData();
        } else {
            setError('Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng');
            setLoading(false);
        }
    }, [orderId]);

    const fetchPaymentData = async () => {
        try {
            setLoading(true);
            console.log('üîÑ ƒêang t·∫£i d·ªØ li·ªáu thanh to√°n ƒë√£ h·ªßy cho ƒë∆°n h√†ng:', orderId);

            const response = await getPaymentByOrderId(orderId);
            console.log('üì• D·ªØ li·ªáu thanh to√°n ƒë√£ h·ªßy:', response);

            if (response?.success && response?.result) {
                setPaymentData(response.result);
                setError(null);
                console.log('‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng d·ªØ li·ªáu thanh to√°n ƒë√£ h·ªßy');
            } else {
                throw new Error(response?.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thanh to√°n');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu thanh to√°n:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setLoading(false);
        }
    };

    const handleConfirmCancellation = () => {
        confirm({
            title: 'X√°c Nh·∫≠n H·ªßy Thanh To√°n',
            icon: <ExclamationCircleOutlined />,
            content: (
                <div>
                    <Paragraph>
                        B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy thanh to√°n n√†y? H√†nh ƒë·ªông n√†y s·∫Ω:
                    </Paragraph>
                    <ul>
                        <li>H·ªßy ƒë·∫∑t l·ªãch kh√°m c·ªßa b·∫°n</li>
                        <li>Ho√†n ti·ªÅn (n·∫øu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω)</li>
                        <li>Gi·∫£i ph√≥ng l·ªãch kh√°m cho ng∆∞·ªùi kh√°c</li>
                    </ul>
                    <Paragraph style={{ color: '#ff4d4f' }}>
                        <strong>L∆∞u √Ω:</strong> Vi·ªác ho√†n ti·ªÅn c√≥ th·ªÉ m·∫•t 3-5 ng√†y l√†m vi·ªác ƒë·ªÉ x·ª≠ l√Ω.
                    </Paragraph>
                </div>
            ),
            okText: 'C√≥, H·ªßy Thanh To√°n',
            okType: 'danger',
            cancelText: 'Gi·ªØ ƒê·∫∑t L·ªãch',
            onOk: performCancellation,
        });
    };

    const performCancellation = async () => {
        try {
            setCancelling(true);
            console.log('üîÑ ƒêang h·ªßy thanh to√°n cho ƒë∆°n h√†ng:', orderId);

            const cancelData = {
                reason: cancelReason || 'Ng∆∞·ªùi d√πng y√™u c·∫ßu h·ªßy',
                cancelledAt: new Date().toISOString()
            };

            await cancelPayment(orderId, cancelData);
            console.log('‚úÖ ƒê√£ h·ªßy thanh to√°n th√†nh c√¥ng');

            await fetchPaymentData();

            Modal.success({
                title: 'ƒê√£ H·ªßy Thanh To√°n',
                content: 'Thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng. Ti·ªÅn ho√†n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong v√≤ng 3-5 ng√†y l√†m vi·ªác.',
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi h·ªßy thanh to√°n:', error);
            Modal.error({
                title: 'H·ªßy Th·∫•t B·∫°i',
                content: 'Kh√¥ng th·ªÉ h·ªßy thanh to√°n. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p.',
            });
        } finally {
            setCancelling(false);
        }
    };

    const handleRetryPayment = () => {
        navigate(`/payment/retry?orderId=${orderId}`);
    };

    const handleGoHome = () => {
        navigate('/');
    };

    const handleBookNewAppointment = () => {
        navigate('/booking');
    };

    // ‚úÖ Loading state
    if (loading) {
        return (
            <div className="payment-loading" style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                minHeight: '60vh',
                flexDirection: 'column'
            }}>
                <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin thanh to√°n..." />
            </div>
        );
    }

    // ‚úÖ Error state
    if (error) {
        return (
            <div className="payment-error">
                <Result
                    status="error"
                    title="L·ªói T·∫£i Th√¥ng Tin Thanh To√°n"
                    subTitle={error}
                    extra={
                        <Space>
                            <Button type="primary" onClick={handleGoHome}>
                                V·ªÅ Trang Ch·ªß
                            </Button>
                            <Button onClick={() => window.location.reload()}>
                                Th·ª≠ L·∫°i
                            </Button>
                        </Space>
                    }
                />
            </div>
        );
    }

    const refundInfo = getRefundStatusInfo(paymentData?.refundStatus);

    return (
        <div className="payment-cancelled-container">
            <div className="payment-cancelled-content">
                {/* ‚úÖ Main Result */}
                <Result
                    status="error"
                    title="Thanh To√°n ƒê√£ B·ªã H·ªßy"
                    subTitle={
                        <div>
                            <Paragraph>
                                Thanh to√°n c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy v√† vi·ªác ƒë·∫∑t l·ªãch kh√°m kh√¥ng ƒë∆∞·ª£c ho√†n th√†nh.
                            </Paragraph>
                            <Text type="secondary">
                                M√£ ƒë∆°n h√†ng: <Text code>{paymentData?.orderCode || orderId}</Text>
                            </Text>
                            <br />
                            <Text type="secondary">
                                M√£ giao d·ªãch: <Text code>{paymentData?.id}</Text>
                            </Text>
                        </div>
                    }
                    icon={<CloseCircleOutlined style={{ color: '#ff4d4f' }} />}
                />

                {/* ‚úÖ Cancellation Alert */}
                <Alert
                    message="Thanh To√°n ƒê√£ H·ªßy"
                    description={
                        <div>
                            <Paragraph style={{ margin: 0 }}>
                                {cancelReason === 'user'
                                    ? 'B·∫°n ƒë√£ h·ªßy qu√° tr√¨nh thanh to√°n. T√†i kho·∫£n c·ªßa b·∫°n s·∫Ω kh√¥ng b·ªã t√≠nh ph√≠.'
                                    : cancelReason === 'timeout'
                                        ? 'Phi√™n thanh to√°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ ƒë·∫∑t l·ªãch l·∫°i.'
                                        : paymentData?.cancellationReason || 'Thanh to√°n ƒë√£ b·ªã h·ªßy. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ n·∫øu ƒëi·ªÅu n√†y kh√¥ng mong mu·ªën.'
                                }
                            </Paragraph>
                            
                        </div>
                    }
                    type="warning"
                    showIcon
                    style={{ marginBottom: 24 }}
                />

                <Row gutter={24}>
                    {/* ‚úÖ Cancellation Details */}
                    <Col xs={24} lg={14}>
                        <Card
                            title={
                                <div style={{ display: 'flex', alignItems: 'center' }}>
                                    <InfoCircleOutlined style={{ marginRight: 8, color: '#ff4d4f' }} />
                                    Chi Ti·∫øt H·ªßy Thanh To√°n
                                </div>
                            }
                            className="cancellation-details-card"
                        >
                            <Descriptions column={1} bordered size="small">
                                <Descriptions.Item label="M√£ ƒë∆°n h√†ng">
                                    <Text code>{paymentData?.orderCode || orderId}</Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="M√£ giao d·ªãch">
                                    <Text code>{paymentData?.id}</Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="Th·ªùi gian h·ªßy">
                                    <Text>
                                        <ClockCircleOutlined style={{ marginRight: 4 }} />
                                        {formatDateTime(paymentData?.canceledAt || paymentData?.createdAt)}
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="L√Ω do h·ªßy">
                                    <Tag color="orange">
                                        {paymentData?.cancellationReason || getCancellationReason(cancelReason)}
                                    </Tag>
                                </Descriptions.Item>
                                <Descriptions.Item label="S·ªë ti·ªÅn">
                                    <Text style={{ fontSize: '16px' }}>
                                        {formatAmount(paymentData?.amount)} VND
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="S·ªë ti·ªÅn ƒë√£ thanh to√°n">
                                    <Text strong style={{ color: '#52c41a' }}>
                                        {formatAmount(paymentData?.amountPaid)} VND
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="S·ªë ti·ªÅn c√≤n l·∫°i">
                                    <Text strong style={{ color: '#faad14' }}>
                                        {formatAmount(paymentData?.amountRemaining)} VND
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="Tr·∫°ng th√°i">
                                    <Tag color="error" icon={<CloseCircleOutlined />}>
                                        ƒê√É H·ª¶Y
                                    </Tag>
                                </Descriptions.Item>
                                <Descriptions.Item label="Ph∆∞∆°ng th·ª©c thanh to√°n">
                                    <Tag color="blue">PayOS</Tag>
                                </Descriptions.Item>
                                
                            </Descriptions>

                            <Divider />



                            {/* ‚úÖ Transactions History */}
                            {paymentData?.transactions && paymentData.transactions.length > 0 && (
                                <>
                                    <Divider />
                                    <Title level={5}>
                                        <DollarOutlined style={{ marginRight: 8 }} />
                                        L·ªãch S·ª≠ Giao D·ªãch
                                    </Title>
                                    {paymentData.transactions.map((transaction, index) => (
                                        <Card key={index} size="small" style={{ marginBottom: 8 }}>
                                            <Descriptions column={2} size="small">
                                                <Descriptions.Item label="M√£ giao d·ªãch">
                                                    <Text code>{transaction.id || `TXN-${index + 1}`}</Text>
                                                </Descriptions.Item>
                                                <Descriptions.Item label="S·ªë ti·ªÅn">
                                                    <Text strong>{formatAmount(transaction.amount)} VND</Text>
                                                </Descriptions.Item>
                                                <Descriptions.Item label="Tr·∫°ng th√°i">
                                                    <Tag color={transaction.status === 'SUCCESS' ? 'success' : 'error'}>
                                                        {transaction.status === 'SUCCESS' ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}
                                                    </Tag>
                                                </Descriptions.Item>
                                                <Descriptions.Item label="Th·ªùi gian">
                                                    <Text>{formatDateTime(transaction.createdAt)}</Text>
                                                </Descriptions.Item>
                                            </Descriptions>
                                        </Card>
                                    ))}
                                </>
                            )}
                        </Card>
                    </Col>

                    {/* ‚úÖ Actions & Support */}
                    <Col xs={24} lg={10}>
                        {/* ‚úÖ Next Actions */}
                        <Card
                            title="B·∫°n mu·ªën l√†m g√¨?"
                            style={{ marginBottom: 16 }}
                            size="small"
                        >
                            <Space direction="vertical" style={{ width: '100%' }}>
                                <Button
                                    type="primary"
                                    icon={<RedoOutlined />}
                                    block
                                    onClick={handleRetryPayment}
                                    size="large"
                                >
                                    Th·ª≠ Thanh To√°n L·∫°i
                                </Button>

                                <Button
                                    icon={<CalendarOutlined />}
                                    block
                                    onClick={handleBookNewAppointment}
                                >
                                    ƒê·∫∑t L·ªãch Kh√°m M·ªõi
                                </Button>

                                <Divider style={{ margin: '12px 0' }} />

                                <Button
                                    icon={<HomeOutlined />}
                                    block
                                    onClick={handleGoHome}
                                >
                                    V·ªÅ Trang Ch·ªß
                                </Button>

                                {paymentData?.status !== 'CANCELLED' && (
                                    <>
                                        <Divider style={{ margin: '12px 0' }} />
                                        <Button
                                            danger
                                            block
                                            loading={cancelling}
                                            onClick={handleConfirmCancellation}
                                        >
                                            X√°c Nh·∫≠n H·ªßy
                                        </Button>
                                    </>
                                )}
                            </Space>
                        </Card>

                        {/* ‚úÖ Common Cancellation Reasons */}
                        <Card title="L√Ω Do H·ªßy Ph·ªï Bi·∫øn" size="small" style={{ marginBottom: 16 }}>
                            <List
                                size="small"
                                dataSource={[
                                    'Thay ƒë·ªïi √Ω ƒë·ªãnh v·ªÅ cu·ªôc h·∫πn',
                                    'V·∫•n ƒë·ªÅ ph∆∞∆°ng th·ª©c thanh to√°n',
                                    'C·∫ßn ƒë·ªïi l·ªãch sang th·ªùi gian kh√°c',
                                    'T√¨m ƒë∆∞·ª£c nh√† cung c·∫•p y t·∫ø kh√°c',
                                    'L·ªói k·ªπ thu·∫≠t trong qu√° tr√¨nh thanh to√°n'
                                ]}
                                renderItem={(item, index) => (
                                    <List.Item style={{ padding: '4px 0' }}>
                                        <Text style={{ fontSize: '12px' }}>
                                            {index + 1}. {item}
                                        </Text>
                                    </List.Item>
                                )}
                            />
                        </Card>

                        {/* ‚úÖ Support Information */}
                        <Card title="C·∫ßn Tr·ª£ Gi√∫p?" size="small">
                            <Space direction="vertical" style={{ width: '100%' }}>
                                <div>
                                    <Text strong style={{ fontSize: '12px' }}>Li√™n H·ªá H·ªó Tr·ª£:</Text>
                                </div>

                                <Button
                                    icon={<PhoneOutlined />}
                                    size="small"
                                    block
                                    href="tel:1900-1234"
                                >
                                    G·ªçi: 1900-1234
                                </Button>

                                <Button
                                    icon={<MailOutlined />}
                                    size="small"
                                    block
                                    href="mailto:hotro@benhvien.com"
                                >
                                    Email: hotro@benhvien.com
                                </Button>
                            </Space>

                            <Alert
                                message="Ch√≠nh S√°ch Ho√†n Ti·ªÅn"
                                description="N·∫øu thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, ti·ªÅn ho√†n th∆∞·ªùng m·∫•t 3-5 ng√†y l√†m vi·ªác ƒë·ªÉ xu·∫•t hi·ªán trong t√†i kho·∫£n c·ªßa b·∫°n."
                                type="info"
                                showIcon
                                style={{ marginTop: 12, fontSize: '11px' }}
                            />
                        </Card>
                    </Col>
                </Row>
            </div>
        </div>
    );
};

export default PaymentCancelled;