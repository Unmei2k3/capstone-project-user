import React, { useState, useEffect } from 'react';
import {
    Result,
    Card,
    Descriptions,
    Button,
    Space,
    Tag,
    Typography,
    Divider,
    Row,
    Col,
    Timeline,
    Alert,
    Spin
} from 'antd';
import {
    CheckCircleOutlined,
    HomeOutlined,
    PrinterOutlined,
    DownloadOutlined,
    CalendarOutlined,
    DollarOutlined,
    ClockCircleOutlined,
    UserOutlined,
    CloseCircleOutlined,
    ExclamationCircleOutlined
} from '@ant-design/icons';
import { useNavigate, useSearchParams } from 'react-router-dom';

import './PaymentSuccess.scss';
import { getPaymentByOrderId } from '../../services/paymentService';
import dayjs from 'dayjs';
import 'dayjs/locale/vi';

// ‚úÖ Set Vietnamese locale
dayjs.locale('vi');

const { Title, Text, Paragraph } = Typography;

const PaymentSuccess = () => {
    const [loading, setLoading] = useState(true);
    const [paymentData, setPaymentData] = useState(null);
    const [error, setError] = useState(null);
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();

    const orderId = searchParams.get('orderId') || searchParams.get('orderCode');
    const status = searchParams.get('status');
    const cancel = searchParams.get('cancel');

    // ‚úÖ Vietnamese date formatting
    const formatDateTime = (dateString) => {
        if (!dateString) return dayjs().format('HH:mm:ss DD/MM/YYYY');

        try {
            const date = dayjs(dateString);
            return date.format('HH:mm:ss DD/MM/YYYY');
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªãnh d·∫°ng ng√†y:', error);
            return dayjs().format('HH:mm:ss DD/MM/YYYY');
        }
    };

    const formatTime = (dateString) => {
        if (!dateString) return dayjs().format('HH:mm:ss');

        try {
            const date = dayjs(dateString);
            return date.format('HH:mm:ss');
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªãnh d·∫°ng gi·ªù:', error);
            return dayjs().format('HH:mm:ss');
        }
    };

    // ‚úÖ Vietnamese amount formatting
    const formatAmount = (amount) => {
        if (!amount && amount !== 0) return '0';
        return new Intl.NumberFormat('vi-VN').format(amount);
    };

    // ‚úÖ Payment status mapping
    const getPaymentStatusInfo = (status) => {
        const statusMap = {
            'PAID': {
                color: 'success',
                icon: <CheckCircleOutlined />,
                text: 'ƒê√É THANH TO√ÅN',
                description: 'Thanh to√°n th√†nh c√¥ng'
            },
            'PENDING': {
                color: 'processing',
                icon: <ClockCircleOutlined />,
                text: 'ƒêANG X·ª¨ L√ù',
                description: 'ƒêang ch·ªù thanh to√°n'
            },
            'CANCELLED': {
                color: 'error',
                icon: <CloseCircleOutlined />,
                text: 'ƒê√É H·ª¶Y',
                description: 'Giao d·ªãch ƒë√£ b·ªã h·ªßy'
            },
            'FAILED': {
                color: 'error',
                icon: <ExclamationCircleOutlined />,
                text: 'TH·∫§T B·∫†I',
                description: 'Thanh to√°n th·∫•t b·∫°i'
            }
        };

        return statusMap[status] || {
            color: 'default',
            icon: <ExclamationCircleOutlined />,
            text: status || 'KH√îNG X√ÅC ƒê·ªäNH',
            description: 'Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh'
        };
    };

    useEffect(() => {
        if (orderId) {
            fetchPaymentData();
        } else {
            setError('Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng');
            setLoading(false);
        }
    }, [orderId]);

    const fetchPaymentData = async () => {
        try {
            setLoading(true);
            console.log('üîÑ ƒêang t·∫£i d·ªØ li·ªáu thanh to√°n cho ƒë∆°n h√†ng:', orderId);

            const response = await getPaymentByOrderId(orderId);
            console.log('üì• Ph·∫£n h·ªìi d·ªØ li·ªáu thanh to√°n:', response);

            if (response?.success && response?.result) {
                setPaymentData(response.result);
                setError(null);
                console.log('‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng d·ªØ li·ªáu thanh to√°n');
            } else {
                throw new Error(response?.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thanh to√°n');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu thanh to√°n:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setLoading(false);
        }
    };

    const handleGoHome = () => {
        navigate('/');
    };

    const handleViewAppointments = () => {
        navigate('/booking-history');
    };

    const handlePrintReceipt = () => {
        window.print();
    };

    const handleDownloadReceipt = () => {
        console.log('üìÑ ƒêang t·∫£i xu·ªëng h√≥a ƒë∆°n...');
        // TODO: Implement download receipt functionality
    };

    // ‚úÖ Loading state
    if (loading) {
        return (
            <div className="payment-loading" style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                minHeight: '60vh',
                flexDirection: 'column'
            }}>
                <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin thanh to√°n..." />
            </div>
        );
    }

    // ‚úÖ Error state
    if (error) {
        return (
            <div className="payment-error">
                <Result
                    status="error"
                    title="L·ªói T·∫£i Th√¥ng Tin Thanh To√°n"
                    subTitle={error}
                    extra={
                        <Space>
                            <Button type="primary" onClick={handleGoHome}>
                                V·ªÅ Trang Ch·ªß
                            </Button>
                            <Button onClick={() => window.location.reload()}>
                                Th·ª≠ L·∫°i
                            </Button>
                        </Space>
                    }
                />
            </div>
        );
    }

    // ‚úÖ Get payment status info
    const statusInfo = getPaymentStatusInfo(paymentData?.status);
    const isPaymentSuccessful = paymentData?.status === 'PAID';
    const isCancelled = paymentData?.status === 'CANCELLED';

    return (
        <div className="payment-success-container">
            <div className="payment-success-content">
                {/* ‚úÖ Dynamic Result based on payment status */}
                <Result
                    status={isPaymentSuccessful ? "success" : isCancelled ? "error" : "warning"}
                    title={
                        isPaymentSuccessful
                            ? "Thanh To√°n Th√†nh C√¥ng!"
                            : isCancelled
                                ? "Thanh To√°n ƒê√£ B·ªã H·ªßy"
                                : "Tr·∫°ng Th√°i Thanh To√°n"
                    }
                    subTitle={
                        <div>
                            <Paragraph>
                                {isPaymentSuccessful
                                    ? "Thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng. Cu·ªôc h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n."
                                    : isCancelled
                                        ? "Giao d·ªãch thanh to√°n ƒë√£ b·ªã h·ªßy. Vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch n·∫øu c·∫ßn."
                                        : `Tr·∫°ng th√°i thanh to√°n: ${statusInfo.description}`
                                }
                            </Paragraph>
                            <Text type="secondary">
                                M√£ ƒë∆°n h√†ng: <Text code>{paymentData?.orderCode || orderId}</Text>
                            </Text>
                            <br />
                            <Text type="secondary">
                                M√£ giao d·ªãch: <Text code>{paymentData?.id}</Text>
                            </Text>
                        </div>
                    }
                    icon={statusInfo.icon}
                />

                {/* ‚úÖ Status Alert */}
                <Alert
                    message={statusInfo.text}
                    description={
                        isPaymentSuccessful
                            ? "Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng v√† cu·ªôc h·∫πn c·ªßa b·∫°n hi·ªán ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n trong th·ªùi gian ng·∫Øn."
                            : isCancelled
                                ? `Giao d·ªãch ƒë√£ b·ªã h·ªßy ${paymentData?.canceledAt ? `v√†o ${formatDateTime(paymentData.canceledAt)}` : ''}. ${paymentData?.cancellationReason || 'Kh√¥ng c√≥ l√Ω do h·ªßy ƒë∆∞·ª£c cung c·∫•p.'}`
                                : statusInfo.description
                    }
                    type={isPaymentSuccessful ? "success" : isCancelled ? "error" : "warning"}
                    showIcon
                    style={{ marginBottom: 24 }}
                />

                <Row gutter={24}>
                    {/* ‚úÖ Payment Details */}
                    <Col xs={24} lg={14}>
                        <Card
                            title={
                                <div style={{ display: 'flex', alignItems: 'center' }}>
                                    <DollarOutlined style={{
                                        marginRight: 8,
                                        color: isPaymentSuccessful ? '#52c41a' : '#faad14'
                                    }} />
                                    Chi Ti·∫øt Thanh To√°n
                                </div>
                            }
                            className="payment-details-card"
                        >
                            <Descriptions column={1} bordered size="small">
                                <Descriptions.Item label="M√£ ƒë∆°n h√†ng">
                                    <Text code>{paymentData?.orderCode}</Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="M√£ giao d·ªãch">
                                    <Text code>{paymentData?.id}</Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="S·ªë ti·ªÅn">
                                    <Text strong style={{
                                        color: isPaymentSuccessful ? '#52c41a' : '#faad14',
                                        fontSize: '16px'
                                    }}>
                                        {formatAmount(paymentData?.amount)} VND
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="S·ªë ti·ªÅn ƒë√£ thanh to√°n">
                                    <Text strong style={{ color: '#52c41a' }}>
                                        {formatAmount(paymentData?.amountPaid)} VND
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="S·ªë ti·ªÅn c√≤n l·∫°i">
                                    <Text strong style={{
                                        color: paymentData?.amountRemaining > 0 ? '#faad14' : '#52c41a'
                                    }}>
                                        {formatAmount(paymentData?.amountRemaining)} VND
                                    </Text>
                                </Descriptions.Item>
                                <Descriptions.Item label="Ph∆∞∆°ng th·ª©c thanh to√°n">
                                    <Tag color="blue">PayOS</Tag>
                                </Descriptions.Item>
                                <Descriptions.Item label="Tr·∫°ng th√°i">
                                    <Tag color={statusInfo.color} icon={statusInfo.icon}>
                                        {statusInfo.text}
                                    </Tag>
                                </Descriptions.Item>
                                <Descriptions.Item label="Ng√†y t·∫°o">
                                    <Text>
                                        <ClockCircleOutlined style={{ marginRight: 4 }} />
                                        {formatDateTime(paymentData?.createdAt)}
                                    </Text>
                                </Descriptions.Item>
                                {paymentData?.canceledAt && (
                                    <Descriptions.Item label="Ng√†y h·ªßy">
                                        <Text style={{ color: '#ff4d4f' }}>
                                            <CloseCircleOutlined style={{ marginRight: 4 }} />
                                            {formatDateTime(paymentData.canceledAt)}
                                        </Text>
                                    </Descriptions.Item>
                                )}
                                {paymentData?.cancellationReason && (
                                    <Descriptions.Item label="L√Ω do h·ªßy">
                                        <Text type="danger">{paymentData.cancellationReason}</Text>
                                    </Descriptions.Item>
                                )}
                            </Descriptions>

                            {/* ‚úÖ Transactions section */}
                            {paymentData?.transactions && paymentData.transactions.length > 0 && (
                                <>
                                    <Divider />
                                    <Title level={5}>
                                        <CalendarOutlined style={{ marginRight: 8 }} />
                                        L·ªãch S·ª≠ Giao D·ªãch
                                    </Title>
                                    {paymentData.transactions.map((transaction, index) => (
                                        <Card key={index} size="small" style={{ marginBottom: 8 }}>
                                            <Descriptions column={2} size="small">
                                                <Descriptions.Item label="M√£ giao d·ªãch">
                                                    <Text code>{transaction.id || `TXN-${index + 1}`}</Text>
                                                </Descriptions.Item>
                                                <Descriptions.Item label="S·ªë ti·ªÅn">
                                                    <Text strong>{formatAmount(transaction.amount)} VND</Text>
                                                </Descriptions.Item>
                                                <Descriptions.Item label="Tr·∫°ng th√°i">
                                                    <Tag color="success">
                                                        Th√†nh c√¥ng
                                                    </Tag>
                                                </Descriptions.Item>
                                                <Descriptions.Item label="Th·ªùi gian">
                                                    <Text>{formatDateTime(transaction.createdAt)}</Text>
                                                </Descriptions.Item>
                                            </Descriptions>
                                        </Card>
                                    ))}
                                </>
                            )}

                            <Divider />


                        </Card>
                    </Col>

                    {/* ‚úÖ Timeline & Actions */}
                    <Col xs={24} lg={10}>
                        {/* ‚úÖ Process Timeline */}
                        <Card
                            title="Ti·∫øn Tr√¨nh X·ª≠ L√Ω"
                            style={{ marginBottom: 16 }}
                            size="small"
                        >
                            <Timeline
                                items={[
                                    {
                                        color: 'green',
                                        children: (
                                            <div>
                                                <Text strong>Kh·ªüi t·∫°o thanh to√°n</Text>
                                                <br />
                                                <Text type="secondary" style={{ fontSize: '12px' }}>
                                                    {formatTime(
                                                        paymentData?.createdAt
                                                            ? dayjs(paymentData.createdAt).subtract(2, 'minute').toISOString()
                                                            : dayjs().subtract(2, 'minute').toISOString()
                                                    )}
                                                </Text>
                                            </div>
                                        ),
                                    },
                                    {
                                        color: paymentData?.status === 'PAID' ? 'green' : paymentData?.status === 'CANCELLED' ? 'red' : 'orange',
                                        children: (
                                            <div>
                                                <Text strong>
                                                    {paymentData?.status === 'PAID'
                                                        ? 'Thanh to√°n th√†nh c√¥ng'
                                                        : paymentData?.status === 'CANCELLED'
                                                            ? 'Thanh to√°n b·ªã h·ªßy'
                                                            : 'X·ª≠ l√Ω thanh to√°n'
                                                    }
                                                </Text>
                                                <br />
                                                <Text type="secondary" style={{ fontSize: '12px' }}>
                                                    {formatTime(
                                                        paymentData?.canceledAt || paymentData?.createdAt || dayjs().toISOString()
                                                    )}
                                                </Text>
                                            </div>
                                        ),
                                    },
                                    ...(isPaymentSuccessful ? [
                                        {
                                            color: 'green',
                                            children: (
                                                <div>
                                                    <Text strong>X√°c nh·∫≠n cu·ªôc h·∫πn</Text>
                                                    <br />
                                                    <Text type="secondary" style={{ fontSize: '12px' }}>
                                                        {formatTime(paymentData?.createdAt)}
                                                    </Text>
                                                </div>
                                            ),
                                        },

                                    ] : [])
                                ]}
                            />
                        </Card>

                        {/* ‚úÖ Next Steps */}
                        <Card title="B∆∞·ªõc Ti·∫øp Theo" size="small">
                            <Space direction="vertical" style={{ width: '100%' }}>
                                {isPaymentSuccessful && (
                                    <Button
                                        type="primary"
                                        icon={<CalendarOutlined />}
                                        block
                                        onClick={handleViewAppointments}
                                    >
                                        Xem Cu·ªôc H·∫πn C·ªßa T√¥i
                                    </Button>
                                )}

                                <Button
                                    icon={<PrinterOutlined />}
                                    block
                                    onClick={handlePrintReceipt}
                                >
                                    In H√≥a ƒê∆°n
                                </Button>

                                <Button
                                    icon={<DownloadOutlined />}
                                    block
                                    onClick={handleDownloadReceipt}
                                >
                                    T·∫£i Xu·ªëng H√≥a ƒê∆°n
                                </Button>

                                {!isPaymentSuccessful && (
                                    <Button
                                        type="primary"
                                        block
                                        onClick={() => window.location.href = '/booking'}
                                    >
                                        ƒê·∫∑t L·ªãch L·∫°i
                                    </Button>
                                )}

                                <Divider style={{ margin: '12px 0' }} />

                                <Button
                                    icon={<HomeOutlined />}
                                    block
                                    onClick={handleGoHome}
                                >
                                    V·ªÅ Trang Ch·ªß
                                </Button>
                            </Space>
                        </Card>

                        {/* ‚úÖ Support Information */}
                        <Alert
                            message="C·∫ßn H·ªó Tr·ª£?"
                            description={
                                <div>
                                    <Paragraph style={{ margin: 0, fontSize: '12px' }}>
                                        N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ thanh to√°n ho·∫∑c cu·ªôc h·∫πn c·ªßa m√¨nh,
                                        vui l√≤ng li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.
                                    </Paragraph>
                                    <Text style={{ fontSize: '12px' }}>
                                        üìû Hotline: 1900-1234 | üìß hotro@benhvien.com
                                    </Text>
                                </div>
                            }
                            type="info"
                            showIcon
                            style={{ marginTop: 16 }}
                        />
                    </Col>
                </Row>
            </div>
        </div>
    );
};

export default PaymentSuccess;